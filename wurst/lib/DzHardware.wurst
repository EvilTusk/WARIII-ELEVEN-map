package DzHardware
import DzHardwareNative
import NoWurst
import Vectors

/** 获取鼠标在游戏内的坐标 */
public function getMouseTerrain() returns vec2
    return vec2(DzGetMouseTerrainX(), DzGetMouseTerrainY())

/** 获取鼠标在游戏内的坐标(三维) */
public function getMouseTerrainWithZ() returns vec3
    return vec3(DzGetMouseTerrainX(), DzGetMouseTerrainY(), DzGetMouseTerrainZ())

/** 鼠标是否在游戏内 */
public function isMouseOverUI() returns boolean
    return DzIsMouseOverUI()

/** 获取鼠标屏幕坐标 */
public function getMouse() returns vec2
    return vec2(I2R(DzGetMouseX()), I2R(DzGetMouseY()))

/** 获取鼠标游戏窗口坐标 */
public function getMouseRelative() returns vec2
    return vec2(I2R(DzGetMouseXRelative()), I2R(DzGetMouseYRelative()))

/** 设置鼠标位置 */
public function setMousePos(vec2 pos)
    DzSetMousePos(R2I(pos.x), R2I(pos.y))

/** 设置鼠标位置 */
public function setMousePos(int x, int y)
    DzSetMousePos(x, y)

/** 注册鼠标点击触发（sync为true时，调用TriggerExecute。为false时，直接运行action函数，可以异步不掉线，action里不要有同步操作） */
public function trigger.registerMouseEventDz(int btn, int status, boolean sync, string func)
    DzTriggerRegisterMouseEvent(this, btn, status, sync, func)

/** 注册键盘点击触发 */
public function trigger.registerKeyEventDz(int key, int status, boolean sync, string func)
    DzTriggerRegisterKeyEvent(this, key, status, sync, func)

/** 注册鼠标滚轮触发 */
public function trigger.registerMouseWheelEventDz(boolean sync, string func)
    DzTriggerRegisterMouseWheelEvent(this, sync, func)

/** 注册鼠标移动触发 */
public function trigger.registerMouseMoveEventDz(boolean sync, string func)
    DzTriggerRegisterMouseMoveEvent(this, sync, func)

/** 获取触发器的按键码 */
public function getTriggerKey() returns int
    return DzGetTriggerKey()

/** 获取滚轮delta */
public function getWheelDelta() returns int
    return DzGetWheelDelta()

/** 判断按键是否按下 */
public function isKeyDown(int iKey) returns boolean
    return DzIsKeyDown(iKey)

/** 获取触发key的玩家 */
public function getTriggerKeyPlayer() returns player
    return DzGetTriggerKeyPlayer()

/** 获取war3窗口宽高 */
public function getWindowSize() returns vec2
    return vec2(I2R(DzGetWindowWidth()), I2R(DzGetWindowHeight()))

/** 获取war3窗口坐标 */
public function getWindowPos() returns vec2
    return vec2(I2R(DzGetWindowX()), I2R(DzGetWindowY()))

/** 注册war3窗口大小变化事件 */
public function trigger.registerWindowResizeEvent(boolean sync, string func)
    DzTriggerRegisterWindowResizeEvent(this, sync, func)

/** 判断窗口是否激活 */
public function isWindowActive() returns boolean
    return DzIsWindowActive()

/** 设置可摧毁物位置 */
public function destructable.setPos(vec2 pos)
    DzDestructablePosition(this, pos.x, pos.y)

/** 设置可摧毁物位置 */
public function destructable.setPos(real x, real y)
    DzDestructablePosition(this, x, y)

/** 设置单位位置-本地调用 */
public function unit.setPosDz(vec2 pos)
    DzSetUnitPosition(this, pos.x, pos.y)

/** 设置单位位置-本地调用 */
public function unit.setPosDz(real x, real y)
    DzSetUnitPosition(this, x, y)

/** 异步执行函数 */
public function executeFuncDz(string funcName)
    DzExecuteFunc(funcName)

/** 取鼠标指向的unit */
public function getUnitUnderMouse() returns unit
    return DzGetUnitUnderMouse()

/** 设置unit的贴图 */
public function unit.setTexture(string path, int texId)
    DzSetUnitTexture(this, path, texId)

/** 注册数据同步trigger */
public function trigger.registerSyncDataDz(string prefix, boolean server)
    DzTriggerRegisterSyncData(this, prefix, server)

/** 同步游戏数据 */
public function syncDataDz(string prefix, string data)
    DzSyncData(prefix, data)

/** 获取同步的数据 */
public function getTriggerSyncDataDz() returns string
    return DzGetTriggerSyncData()

/** 获取同步数据的玩家 */
public function getTriggerSyncPlayerDz() returns player
    return DzGetTriggerSyncPlayer()
