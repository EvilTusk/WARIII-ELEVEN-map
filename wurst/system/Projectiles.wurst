package Projectiles
import UnitBase
import TriggerUtil
import Fx
import TimerUtils
import HashMap

public class Projectiles
    /** 模型 */
    string modelPath
    /** 模型缩放 */
    real modelScale
    /** 初始高度 */
    int originHeight
    /** 最低高度 */
    int lowestHeight
    /** 初始速度 */
    int originSpeed
    /** 初始加速度 */
    real originAcceleration
    /** 加速度递增 */
    real accelerationIncrease
    /** 转向角速度 */
    angle angularVelocity
    /** 飞行时间 */
    real flyingTime
    /** 飞行距离 */
    int flyingDistance
    /** 判定范围 */
    int judgmentRange
    /** 是否指向 */
    bool isTarget
    /** 是否可被抵消 */
    bool canOffset
    
    /** 死亡回调 */
    private trigger onDeathCallbackTrigger = null
    /** 飞行道具所有者 */
    private UnitBase owner

    /** Fx暂存器 */
    private HashMap<int, Fx> fxMap = new HashMap<int, Fx>()
    /** 目标暂存器 */
    private HashMap<int, unit> targetMap = new HashMap<int, unit>()
    /** 目标点暂存器 */
    private HashMap<int, real> objPosMapX = new HashMap<int, real>()
    private HashMap<int, real> objPosMapY = new HashMap<int, real>()
    /** 回调暂存器 */
    private HashMap<int, int> callbackDataMap = new HashMap<int, int>()

    /** 默认普通攻击 */
    construct(UnitBase owner, string modelPath)
        this.owner = owner
        this.modelPath = modelPath
        this.isTarget = true
        this.judgmentRange = 20
        this.modelScale = 1.
        this.lowestHeight = 50

    /** 飞行道具死亡回调 */
    function setDeathCallback(trigger callbackTrigger)
        onDeathCallbackTrigger = callbackTrigger

    /** 运行飞行道具(指向) */
    function run(vec2 pos, UnitBase target, int callbackData)
        let fx = new Fx(vec3(pos.x, pos.y, originHeight.toReal()), pos.angleTo(target.getUnit().getPos()), modelPath)
        ..setPlayerColor(owner.getOwner().getColor())
        ..setScale(modelScale)

        let t = getTimer()
        let key = t.getHandleId()

        fxMap.put(key, fx)
        targetMap.put(key, target.getUnit())
        callbackDataMap.put(key, callbackData)

        t..setData(this castTo int)
        .startPeriodic(0.02) ->
            let _t = GetExpiredTimer()
            let _v = _t.getData() castTo thistype
            let _key = _t.getHandleId()
            let _fx = _v.fxMap.get(_key)
            let _target = _v.targetMap.get(_key)

            if _target.isAlive()
                let objPos = _target.getPos3with(_v.lowestHeight.toReal())
                let curPos = _fx.getPos3()
                _fx..setXYAngle(curPos.angleTo2d(objPos))
                ..setXYZ(curPos.moveTowards(objPos, _v.originSpeed.toReal()*0.02), true)

                let afterPos = _fx.getPos3()
                if afterPos.distanceTo(objPos) < _v.judgmentRange.toReal()
                    _v.fxMap.remove(_key)
                    _v.targetMap.remove(_key)
                    _t.destr()
                    destroy _fx
                    if (_v.onDeathCallbackTrigger != null)
                        _v.onDeathCallbackTrigger..setData(_v.callbackDataMap.getAndRemove(_key)).evaluate()
                    
            else
                _v.targetMap.remove(_key)
                _v.objPosMapX.put(_key, _target.getX())
                _v.objPosMapY.put(_key, _target.getY())
                _t..pause()
                _t.startPeriodic(0.02) ->
                    let __t = GetExpiredTimer()
                    let __v = __t.getData() castTo thistype
                    let __key = __t.getHandleId()
                    let __fx = __v.fxMap.get(__key)
                    let objPos = vec3(__v.objPosMapX.get(__key), __v.objPosMapY.get(__key), __v.lowestHeight.toReal())
                    let curPos = __fx.getPos3()
                    __fx..setXYAngle(curPos.angleTo2d(objPos))
                    ..setXYZ(curPos.moveTowards(objPos, __v.originSpeed.toReal()*0.02), true)

                    let afterPos = __fx.getPos3()
                    if afterPos.distanceTo(objPos) < __v.judgmentRange.toReal()
                        __v.fxMap.remove(__key)
                        __v.objPosMapX.remove(__key)
                        __v.objPosMapY.remove(__key)
                        __t.destr()
                        destroy __fx
                        if (__v.onDeathCallbackTrigger != null)
                            __v.callbackDataMap.remove(__key)
    
    
