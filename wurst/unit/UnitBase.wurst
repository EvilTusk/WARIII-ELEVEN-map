package UnitBase
import UnitObjEditing
import HashMap
import TriggerUtil
import initlater DamageSystem
import initlater Projectiles
import LinkedList

HashMap<int, UnitBase> unitBaseMap = new HashMap<int, UnitBase>()

public function unit.getUnitBase() returns UnitBase
    let key = this.getHandleId()
    if unitBaseMap.has(key)
        return unitBaseMap.get(key)
    else
        return null

function unit.setUnitBase(UnitBase value)
    let key = this.getHandleId()
    unitBaseMap.put(key, value)

function unit.clearUnitBase()
    let key = this.getHandleId()
    if unitBaseMap.has(key)
        unitBaseMap.remove(key)



public abstract class UnitBase
    /** 单位ID */
    static constant int unitId = 'u000'
    protected int unitID = 'u000'

    /** 初始攻击 */
    protected int sAD = 0
    /** 初始法强 */
    protected int sAP = 0
    /** 初始防御 */
    protected int sAR = 0
    /** 初始魔抗 */
    protected int sMR = 0
    /** 初始生命 */
    protected int sHP = 0
    /** 初始魔法 */
    protected int sMP = 0
    /** 初始攻速 */
    protected real sAS = 0
    /** 初始移速 */
    protected real sMS = 0
    /** 初始回血 */
    protected real sRH = 0
    /** 初始回蓝 */
    protected real sRM = 0
    /** 初始攻击范围 */
    protected int sAttackRange = 0
    /** 初始是否近战 */
    protected bool sIsMelee = false
    /** 初始模型路径 */
    protected string sUnitModelPath = ""
    /** 初始普通攻击飞行道具 */
    protected Projectiles sUnitAttackProjectiles

    /** 成长攻击 */
    protected real uAD = 0.
    /** 成长法强 */
    protected real uAP = 0.
    /** 成长防御 */
    protected real uAR = 0.
    /** 成长魔抗 */
    protected real uMR = 0.
    /** 成长生命 */
    protected real uHP = 0.
    /** 成长魔法 */
    protected real uMP = 0.
    /** 成长攻速 */
    protected real uAS = 0.
    /** 成长移速 */
    protected real uMS = 0.
    /** 成长回血 */
    protected real uRH = 0.
    /** 成长回蓝 */
    protected real uRM = 0.

    /** 当前攻击 */
    real cAD
    /** 当前法强 */
    real cAP
    /** 当前防御 */
    real cAR
    /** 当前魔抗 */
    real cMR
    /** 当前生命 */
    real cHP
    /** 当前魔法 */
    real cMP
    /** 当前生命最大值 */
    real cHPMax
    /** 当前魔法最大值 */
    real cMPMax
    /** 当前攻速 */
    real cAS
    /** 当前移速 */
    real cMS
    /** 当前回血 */
    real cRH
    /** 当前回蓝 */
    real cRM
    /** 当前攻击范围 */
    real cAttackRange
    /** 当前是否近战 */
    bool cIsMelee
    /** 当前等级 */
    int cLV = 1

    /** 当前模型路径 */
    protected string cUnitModelPath
    /** 当前普通攻击飞行道具 */
    protected Projectiles cUnitAttackProjectiles

    /** 当前绑定单位 */
    private unit cUnit
    /** 辅助删除触发器 */
    private trigger assistTrigger

    /** 远程攻击触发器 */
    private trigger rangeAttackTrigger



    /** 时点-死亡时 */
    LinkedList<trigger> onUnitDeathTriggerList = new LinkedList<trigger>()


    ondestroy
        cUnit.clearUnitBase()
        assistTrigger.release()
        rangeAttackTrigger.release()
        onUnitDeathTriggerList.clear()

    /** 初始化当前状态 */
    protected function initState()
        cAD = sAD.toReal()
        cAP = sAP.toReal()
        cAR = sMR.toReal()
        cMR = sMR.toReal()
        cHP = sHP.toReal()
        cMP = sMP.toReal()
        cHPMax = sHP.toReal()
        cMPMax = sMP.toReal()
        cAS = sAS
        cMS = sMS
        cRH = sRH
        cRM = sRM

        cAttackRange = sAttackRange.toReal()
        cIsMelee = sIsMelee
        cUnitModelPath = sUnitModelPath
        cUnitAttackProjectiles = sUnitAttackProjectiles

        if not cIsMelee
            rangeAttackTrigger = CreateTrigger()
            ..addCondition(Condition(function rangeAttackCallback))
            cUnitAttackProjectiles.setDeathCallback(rangeAttackTrigger)

    /** 远程攻击回调 */
    private static function rangeAttackCallback()
        destroy GetTriggeringTrigger().getData() castTo DamageEvent..run()
        

    /** 获取单位ID */
    function getUnitId() returns int
        return unitId

    /** 获取绑定单位 */
    function getUnit() returns unit
        return cUnit

    /** 创建单位 */
    function create(player p, vec2 pos, angle face) returns unit
        cUnit = createUnit(p, unitID, pos, face)
        ..setUnitBase(this)
        assistTrigger = CreateTrigger()
        ..registerUnitEvent(cUnit, EVENT_UNIT_DEATH)
        ..setData(this castTo int)
        ..addCondition(Condition(() -> begin
            let ct = GetTriggeringTrigger()
            let v = ct.getData() castTo UnitBase

            // 时点-死亡时
            for m in v.onUnitDeathTriggerList
                m.evaluate()

            if v != null
                destroy v
        end))
        return cUnit

    /** 获取所有者 */
    function getOwner() returns player
        if (cUnit != null)
            return cUnit.getOwner()
        else
            return null
    
    /** 减少当前血量 */
    function setHPDecrease(real hp)
        if (cUnit == null)
            return
        cHP -= hp
        if (cHP <= 0)
            cUnit.kill()
        else
            cUnit.setHP(cHP/cHPMax * 100)

    /** 增加当前血量 */
    function setHPIncrease(real hp)
        if (cUnit == null)
            return
        cHP += hp
        if (cHP > cHPMax)
            cHP = cHPMax
        cUnit.setHP(cHP/cHPMax * 100)

    /** 发动普通攻击 */
    function runNormalAttack(UnitBase objUnit)
        if cIsMelee
            destroy new DamageEvent(this, objUnit)..run()
        else
            cUnitAttackProjectiles.run(this.getUnit().getPos(), objUnit, new DamageEvent(this, objUnit) castTo int)

    /** 设置等级 */
    function setLV(int lv)
        cLV = lv
        cAD = sAD + (lv-1)*uAD
        cAP = sAP + (lv-1)*uAP
        cAR = sAR + (lv-1)*uAR
        cMR = sMR + (lv-1)*uMR
        cHP = sHP + (lv-1)*uHP
        cMP = sMP + (lv-1)*uMP
        cHPMax = sHP + (lv-1)*uHP
        cMPMax = sHP + (lv-1)*uMP
        cAS = sAS + (lv-1)*uAS
        cMS = sMS + (lv-1)*uMS
        cRH = sRH + (lv-1)*uRH
        cRM = sRM + (lv-1)*uRM

    /** 升级 */
    function lvUp()
        cLV++
        cAD = sAD + (cLV-1)*uAD
        cAP = sAP + (cLV-1)*uAP
        cAR = sAR + (cLV-1)*uAR
        cMR = sMR + (cLV-1)*uMR
        cHP = sHP + uHP
        cMP = sMP + uMP
        cHPMax = sHP + (cLV-1)*uHP
        cMPMax = sHP + (cLV-1)*uMP
        cAS = sAS + (cLV-1)*uAS
        cMS = sMS + (cLV-1)*uMS
        cRH = sRH + (cLV-1)*uRH
        cRM = sRM + (cLV-1)*uRM




/** 生成单位 */
public function compileGenerateUnit(int unitId) returns UnitOrBuildingOrHeroDefinition
    UnitOrBuildingOrHeroDefinition u = new UnitOrBuildingOrHeroDefinition(unitId, 'hfoo')

    u.setNormalAbilities("")
    u.setCollisionSize(20.)
    u.setDeathTimeseconds(2.)
    u.setAnimationCastPoint(0.)
    u.setAnimationCastBackswing(0.)
    u.setTurnRate(3)
    u.setArmorType(ArmorType.Divine)
    u.setAcquisitionRange(600.)
    u.setDefenseBase(100)
    u.setArmorSoundType(ArmorSoundType.Flesh)
    u.setAttack1AnimationDamagePoint(0.)
    u.setAttack1AnimationBackswingPoint(0.)
    u.setAttack1WeaponSound(WeaponSound.Nothing)
    u.setAttack1AttackType(AttackType.Normal)
    u.setAttack1DamageBase(1)
    u.setAttack1DamageSidesperDie(1)
    u.setAttack1DamageNumberofDice(1)
    u.setAttack1RangeMotionBuffer(300)
    u.setHitPointsMaximumBase(100)
    u.setHitPointsRegenerationRate(0)
    u.setManaMaximum(0)
    u.setManaRegeneration(0)
    u.setSightRadiusDay(1200)
    u.setSightRadiusNight(1200)
    u.setCanFlee(false)

    return u